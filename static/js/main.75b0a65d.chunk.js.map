{"version":3,"sources":["components/App/App.js","serviceWorker.js","index.js","components/App/App.module.css"],"names":["App","className","styles","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","process","JSON","parse","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","message","component","StrictMode","ReactDOM","render","document","getElementById","module","exports"],"mappings":"mQAWeA,MARf,WACI,OACI,yBAAKC,UAAWC,IAAOF,KAAvB,SCLFG,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UACa,UAA7BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MACrB,2DA2BR,SAASC,EAAgBC,EAAOC,GAC5BC,UAAUC,cACLC,SAASJ,GACTK,MAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,YACxBC,QAAQC,IACJ,iHAGAb,GAAUA,EAAOc,UACjBd,EAAOc,SAAST,KAGpBO,QAAQC,IAAI,sCACRb,GAAUA,EAAOe,WACjBf,EAAOe,UAAUV,WAOxCW,OAAM,SAAAC,GACHL,QAAQK,MAAM,4CAA6CA,M,YCrDvEL,QAAQC,IAAR,oBAAyBK,UACzBN,QAAQC,IAAR,oCAAyCK,UAErCC,KAAKC,MAAMF,SDHR,SAAkBlB,GACrB,GAA6C,kBAAmBC,UAAW,CAEvE,GADkB,IAAIoB,IAAIH,uBAAwBxB,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OACrC,OAEJ7B,OAAO8B,iBAAiB,QAAQ,WAC5B,IAAMzB,EAAK,UAAMmB,uBAAN,sBACP1B,IAiDhB,SAAiCO,EAAOC,GACpCyB,MAAM1B,EAAO,CACT2B,QAAS,CAAC,iBAAkB,YAE3BtB,MAAK,SAAAuB,GACF,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAE5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GAC/BA,EAAa4B,aAAa7B,MAAK,WAC3BV,OAAOC,SAASuC,eAIxBpC,EAAgBC,EAAOC,MAG9BgB,OAAM,WACHJ,QAAQC,IACJ,oEArEAsB,CAAwBpC,EAAOC,GAC/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WAC/BQ,QAAQC,IACJ,iHAKRf,EAAgBC,EAAOC,OCbnCE,GDgFI,kBAAmBD,WACnBA,UAAUC,cAAc8B,MACnB5B,MAAK,SAAAC,GACFA,EAAa4B,gBAEhBjB,OAAM,SAAAC,GACHL,QAAQK,MAAMA,EAAMmB,YCjFpC,IAAMC,EACF,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,KACI,kBAAC,EAAD,QAKZC,IAASC,OAAOH,EAAWI,SAASC,eAAe,U,kBCxBnDC,EAAOC,QAAU,CAAC,IAAM,oB","file":"static/js/main.75b0a65d.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './App.module.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={styles.App}>\r\n            TODO\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    window.location.hostname === '[::1]' ||\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            return;\r\n        }\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n            if (isLocalhost) {\r\n                checkValidServiceWorker(swUrl, config);\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            console.log('Content is cached for offline use.');\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'},\r\n    })\r\n        .then(response => {\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nconsole.log(`Version = ${process.env.REACT_APP_VERSION}`);\r\nconsole.log(`Register service worker = ${process.env.REACT_APP_REGISTER_SERVICE_WORKER}`);\r\n\r\nif (JSON.parse(process.env.REACT_APP_REGISTER_SERVICE_WORKER)) {\r\n    serviceWorker.register();\r\n} else {\r\n    serviceWorker.unregister();\r\n}\r\n\r\nconst component = (\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </React.StrictMode>\r\n);\r\n\r\nReactDOM.render(component, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__aOmNj\"};"],"sourceRoot":""}